import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

export const VendorApi = createApi({
    reducerPath: 'VendorApi',
    baseQuery: fetchBaseQuery({ baseUrl: import.meta.env.VITE_BACKEND_URL }),
    tagTypes: ['Vendors'],
    endpoints: (builder) => ({
        // Query to get all vendors with optional filters
        getAllVendors: builder.query({
            query: (filters) => ({
                url: '/vendor/all',
                method: 'GET',
                params: filters,
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                },
            }),
            providesTags: ['Vendors'],
        }),



        addVendor: builder.mutation({
            query: (vendorData) => ({
                url: '/vendor/create',
                method: 'POST',
                body: vendorData,
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                    'Content-Type': 'application/json',
                },
            }),
            invalidatesTags: ['Vendors'],
        }),

        updateVendor: builder.mutation({
            query: ({ id, ...updateData }) => ({
                    url: `/vendor/update/${id}`,
                    method: 'PATCH',
                    body: JSON.stringify(updateData), // Ensure body is correctly formatted as JSON
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`,
                        'Content-Type': 'application/json',
                },
            }),
            invalidatesTags: ['Vendors'],
        }),
        

        // Mutation to delete a vendor by ID
        deleteVendor: builder.mutation({
            query: (id) => ({
                url: `/vendor/delete/${id}`,
                method: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token'),
                },
            }),
            invalidatesTags: ['Vendors'],
        }),
    }),
});

// Exporting the hooks generated by RTK Query
export const {
    useGetAllVendorsQuery,
    useGetVendorByIdQuery,
    useAddVendorMutation,
    useUpdateVendorMutation,
    useDeleteVendorMutation,
} = VendorApi;
